version: '3.8'

services:
  # FastAPI service
  api:
    build: ./api
    ports:
      - "8000:8000"
    depends_on:
      - redis
      - postgres
    environment:
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - POSTGRES_DB=tradingbot
      - POSTGRES_USER=botuser
      - POSTGRES_PASSWORD=botpassword
      - DB_HOST=postgres
      - DB_PORT=5432
    networks:
      - bot-network
    deploy:
      resources:
        limits:
          cpus: "0.2"
          memory: "256M"
        reservations:
          cpus: "0.1"
          memory: "128M"
      restart_policy:
        condition: on-failure
    logging:
      driver: "json-file"
      options:
        max-size: "5m"
        max-file: "3"
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8000/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  binance-connector:
    build:
      context: ./connectors/binance_connector
      dockerfile: Dockerfile
    ports:
      - "8001:8001" # Expose port 8001 for the API
    environment:
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      # - BINANCE_API_KEY=${BINANCE_API_KEY}       # To be sourced from .env file or CI/CD variables
      # - BINANCE_API_SECRET=${BINANCE_API_SECRET} # To be sourced from .env file or CI/CD variables
    networks:
      - bot-network
    depends_on:
      - redis
    # healthcheck: # Optional: implement a proper healthcheck later
    #   test: ["CMD-SHELL", "curl -f http://localhost:8001/health || exit 1"]
    #   interval: 30s
    #   timeout: 10s
    #   retries: 3
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    deploy:
      resources:
        limits:
          cpus: "0.3"
          memory: "256M"
        reservations:
          cpus: "0.15"
          memory: "128M"
      restart_policy:
        condition: on-failure

  luno-connector:
    build:
      context: ./connectors/luno_connector
      dockerfile: Dockerfile
    ports:
      - "8002:8002" # Expose port 8002 for Luno connector
    environment:
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - LUNO_API_KEY_ID=${LUNO_API_KEY_ID}       # To be sourced from .env file
      - LUNO_API_SECRET_KEY=${LUNO_API_SECRET_KEY} # To be sourced from .env file
      # Add any other Luno specific env vars if needed
    networks:
      - bot-network
    depends_on:
      - redis
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    deploy:
      resources:
        limits:
          cpus: "0.3"
          memory: "256M"
        reservations:
          cpus: "0.15"
          memory: "128M"
      restart_policy:
        condition: on-failure

  # Trading bot service
  bot:
    build: ./bot
    depends_on:
      - redis
      - postgres
    environment:
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - POSTGRES_DB=tradingbot
      - POSTGRES_USER=botuser
      - POSTGRES_PASSWORD=botpassword
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
    networks:
      - bot-network
    volumes:
      - ./src:/bot
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:5000/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: "0.5"
          memory: "512M"
        reservations:
          cpus: "0.25"
          memory: "256M"
      restart_policy:
        condition: on-failure
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Redis service
  redis:
    image: redis:7.0-alpine
    ports:
      - "6379:6379"
    volumes:
      - ./config/redis.conf:/usr/local/etc/redis/redis.conf
    command: ["redis-server", "/usr/local/etc/redis/redis.conf"]
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - bot-network
    logging:
      driver: "json-file"
      options:
        max-size: "5m"
        max-file: "3"
    deploy:
      resources:
        limits:
          cpus: "0.2"
          memory: "256M"
        reservations:
          cpus: "0.1"
          memory: "128M"
      restart_policy:
        condition: on-failure

  # PostgreSQL service
  postgres:
    build:
      context: postgres
      dockerfile: Dockerfile
    environment:
      POSTGRES_DB: tradingbot
      POSTGRES_USER: botuser
      POSTGRES_PASSWORD: botpassword
      POSTGRES_PORT: 5432
    volumes:
      - postgres-data:/var/lib/postgresql/data
    expose:
      - "5433"
    ports:
      - "5433:5432"
    networks:
      - bot-network
    deploy:
      resources:
        limits:
          cpus: "0.2"
          memory: "256M"
        reservations:
          cpus: "0.1"
          memory: "128M"
      restart_policy:
        condition: on-failure
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U botuser -d tradingbot -p 5432"]
      interval: 30s
      timeout: 10s
      retries: 3
    command: ["postgres", "-c", "shared_preload_libraries=timescaledb"]

  # Prometheus for metrics
  prometheus:
    image: prom/prometheus:latest
    volumes:
      - ./config/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"
    networks:
      - bot-network
    deploy:
      resources:
        limits:
          cpus: "0.2"
          memory: "256M"
        reservations:
          cpus: "0.1"
          memory: "128M"
      restart_policy:
        condition: on-failure

  # Grafana for metrics visualization
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=adminpassword
    volumes:
      - grafana-data:/var/lib/grafana
    networks:
      - bot-network
    deploy:
      resources:
        limits:
          cpus: "0.2"
          memory: "256M"
        reservations:
          cpus: "0.1"
          memory: "128M"
      restart_policy:
        condition: on-failure

  # Elasticsearch for log storage
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.0.0
    environment:
      - discovery.type=single-node
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ports:
      - "9200:9200"
      - "9300:9300"
    networks:
      - bot-network
    volumes:
      - es-data:/usr/share/elasticsearch/data
    deploy:
      resources:
        limits:
          cpus: "0.5"
          memory: "1G"
        reservations:
          cpus: "0.25"
          memory: "512M"
      restart_policy:
        condition: on-failure

  # Logstash for centralized logging
  logstash:
    image: docker.elastic.co/logstash/logstash:8.0.0
    volumes:
      - ./config/logstash/logstash.conf:/usr/share/logstash/pipeline/logstash.conf
    ports:
      - "5044:5044"
    networks:
      - bot-network
    deploy:
      resources:
        limits:
          cpus: "0.2"
          memory: "512M"
        reservations:
          cpus: "0.1"
          memory: "256M"
      restart_policy:
        condition: on-failure

  # Kibana for log visualization
  kibana:
    image: docker.elastic.co/kibana/kibana:8.0.0
    ports:
      - "5601:5601"
    networks:
      - bot-network
    deploy:
      resources:
        limits:
          cpus: "0.2"
          memory: "512M"
        reservations:
          cpus: "0.1"
          memory: "256M"
      restart_policy:
        condition: on-failure

networks:
  bot-network:
    driver: bridge

volumes:
  postgres-data:
  grafana-data:
  es-data:
